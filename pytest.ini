[tool:pytest]
testpaths = app/tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
addopts = 
    -v
    --tb=short
    --strict-markers
    --disable-warnings
    --cov=app
    --cov-report=term-missing
    --cov-report=html:htmlcov
asyncio_mode = auto
markers =
    unit: Unit tests
    integration: Integration tests
    slow: Slow tests
    api: API tests

empty_parameter_set_mark = skip

# testpaths
# 테스트 파일 경로 pytest는 해당 경로에서만 테스트를 찾게됨.

# python_files
# 테스트 파일명의 패턴을 뜻함.

# python_classes
# 테스트 클래스명의 패턴을 뜻함.

# python_functions
# 테스트 함수명의 패턴을 뜻함.

# addopts
# 테스트 실행 시 추가 옵션을 말하는데 옵션마다 뜻은 다음과 같음
# -v: verbose 모드로 실행
# --tb=short: traceback을 짧게 출력
# --strict-markers: 정의되지 않은 마커를 사용하면 오류(마커는 아래서 설명)
# --disable-warnings: 경고 메시지 출력 안함
# --cov=app: app 모듈에 대한 코드 커버리지 측정
# --cov-report=term-missing: 터미널에 누락된 커버리지 보고서 출력
# --cov-report=html:htmlcov: HTML 형식으로 커버리지 보고서를 생성하여 htmlcov 디렉토리에 저장 (특별한 일 아니면 안쓸 것 같음)

# asyncio_mode
# asyncio 모드를 자동으로 감지하여 설정
# 이름에서도 알 수 있듯이 비동기 테스트 지원을 함.

# markers
# 마커란 테스트 분류하기 위한 태그 같은 것임.
# unit: 단위 테스트
# integration: 통합 테스트
# slow: 느린 테스트(뭔지 모르겠음)
# api: API 테스트
# 그래서 특정 마커만 테스트가 가능하다.
# pytest -m unit 혹은 pytest -m "unit or integration" 혹은 pytest -m "not slow"